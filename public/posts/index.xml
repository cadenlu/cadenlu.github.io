<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on caden lu</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on caden lu</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Sep 2024 10:33:57 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode Dailies 4-5</title>
      <link>http://localhost:1313/posts/2024-09-05/</link>
      <pubDate>Thu, 05 Sep 2024 10:33:57 -0700</pubDate>
      <guid>http://localhost:1313/posts/2024-09-05/</guid>
      <description>Walking Robot Simulation def robotSim(self, commands: List[int], obstacles: List[List[int]]) -&amp;gt; int: # for O(1) lookup in obstacles obstacles = set(map(tuple, obstacles)) direction = 0 # O123 is NESW move = [(0,1), (1,0), (0,-1), (-1,0)] max_distance = 0 curr = [0,0] for command in commands: if command &amp;gt; 0: # move in direction while command &amp;gt; 0 and (curr[0]+move[direction][0], curr[1]+move[direction][1]) not in obstacles: curr[0] += move[direction][0] curr[1] += move[direction][1] command -= 1 elif command == -1: # right direction = (direction + 1) % 4 elif command == -2: # left direction = (direction + 3) % 4 max_distance = max(max_distance, curr[0]*curr[0] + curr[1]*curr[1]) return max_distance Was getting TLE the first time since I used obstacles as is for lookups, pretty straightforward otherwise.</description>
    </item>
    <item>
      <title>Leetcode Dailies 1-3</title>
      <link>http://localhost:1313/posts/2024-09-03/</link>
      <pubDate>Tue, 03 Sep 2024 09:50:43 -0700</pubDate>
      <guid>http://localhost:1313/posts/2024-09-03/</guid>
      <description>Convert 1D Array Into 2D Array def construct2DArray(self, original: List[int], m: int, n: int) -&amp;gt; List[List[int]]: return [original[i:i+n] for i in range(0, m*n, n)] if len(original) == m*n else [] List comprehensions and ternary operators are fun.&#xA;Find the Student that Will Replace the Chalk def chalkReplacer(self, chalk: List[int], k: int) -&amp;gt; int: k = k % sum(chalk) for i in range(len(chalk)): if k &amp;lt; chalk[i]: return i k -= chalk[i] I thought this was an &amp;ldquo;easy&amp;rdquo; problem when I read this no way it should be a &amp;ldquo;medium&amp;rdquo;.</description>
    </item>
  </channel>
</rss>
